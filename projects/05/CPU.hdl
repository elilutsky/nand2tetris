// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    ARegister(in=aRegisterInput, load=shouldLoadA,    out=aRegisterOut, out[0..14]=addressM);
    DRegister(in=aluOut,         load=shouldLoadD,    out=dRegisterOut);
    PC(in=aRegisterOut, load=takeJump, inc=true, reset=reset, out[0..14]=pc);
    
    ALU(x=dRegisterOut, y=alu2ndInput,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM, zr=isZeroAluOut, ng=isNegativeAluOut);
    
    // For A-instructions (msb==0), select the instruction value
    // For C-instructions (msb==1), select the ALU output
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegisterInput); 
    
    // Load the A-Register for A instructions and C instructions that write to A
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=shouldLoadA);
    
    // Load D-register in C instructions, when requested by the instruction
    And(a=instruction[15], b=instruction[4], out=shouldLoadD);
    
    // the "a" bit selects between the A register and memory M. 
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=alu2ndInput);
    
    // set writeM for C instructions that request so
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // Determine whether should take the jump
    Or(a=isZeroAluOut, b=isNegativeAluOut, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=isPositiveAluOut);
    
    And(a=isZeroAluOut, b=instruction[1], out=zeroBranch);
    And(a=isNegativeAluOut, b=instruction[2], out=negativeBranch);
    And(a=isPositiveAluOut, b=instruction[0], out=positiveBranch);
    
    Or8Way(in[0]=zeroBranch, in[1]=negativeBranch, in[2]=positiveBranch,
           in[3]=false, in[4]=false, in[5]=false, in[6]=false, in[7]=false,
           out=shouldBranch);
           
    // Only relevant for C instructions
    And(a=shouldBranch, b=instruction[15], out=takeJump);
    
}