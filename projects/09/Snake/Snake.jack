class Snake {
    field BlockList blockList;
	field int blockSize;
	// The distance between the different blocks
	field int blockDistance;
	// 1 = Right, 2 = Left, 3 = Up, 4 = Down
	field int direction;

    /** Creates a new snake. */
    constructor Snake new(int blockSizeIn, int startLocationX, int startLocationY, int blockDistanceIn) {
		let blockSize = blockSizeIn;
		let direction = 2;
		let blockDistance = blockDistanceIn;
		do initBasicSnake(startLocationX, startLocationY);
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
		do blockList.dispose();
        do Memory.deAlloc(this);
        return;
    }
	
	method void initBasicSnake(int startLocationX, int startLocationY) {
		var Block first, second, third;
		let first = Block.new(startLocationX, startLocationY, blockSize);
		let second = Block.new(startLocationX + blockSize + blockDistance, startLocationY, blockSize);
		let third = Block.new(startLocationX + (blockSize * 2) + blockDistance, startLocationY, blockSize);
		let blockList = BlockList.new(first);
		do blockList.appendBlock(second);
		do blockList.appendBlock(third);
		return;
	}

    /** Draws the snake on the screen. */
    method void draw() {
        do blockList.draw();
        return;
    }
	
	/** Moves the snake one step in the current direction. */
	method void move() {
		var BlockList lastBlockList;
		var Block lastBlock, firstBlock;
		
		let lastBlockList = blockList.removeLast();
		let lastBlock = lastBlockList.getBlock();
		let firstBlock = blockList.getBlock();
		
		if (direction = 1) {
			do lastBlock.setX(firstBlock.getX() + blockSize + blockDistance);
			do lastBlock.setY(firstBlock.getY());
		}
		if (direction = 2) {
			do lastBlock.setX(firstBlock.getX() - blockSize - blockDistance);
			do lastBlock.setY(firstBlock.getY());
		}
		if (direction = 3) {
			do lastBlock.setY(firstBlock.getY() - blockSize - blockDistance);
			do lastBlock.setX(firstBlock.getX());
		}
		if (direction = 4) {
			do lastBlock.setY(firstBlock.getY() + blockSize + blockDistance);
			do lastBlock.setX(firstBlock.getX());
		}
		
		do lastBlockList.appendBlockList(blockList); // move the last element to be the first;
		let blockList = lastBlockList;
		return;
	}
	
	/** Sets the direction of the snake. U-Turns are not allowed. */
	method void setDirection(int newDirection) {
		if (((direction = 1) & (newDirection = 2)) | ((direction = 2) & (newDirection = 1))) {
			// U-Turns are not allowed
			return;
		}
		if (((direction = 3) & (newDirection = 4)) | ((direction = 4) & (newDirection = 3))) {
			// U-Turns are not allowed
			return;
		}
		let direction = newDirection;
		return;
	}
	
	/** Increases the size of the snake by 1 */
	method void increaseSize() {
		var Block newBlock, firstBlock;
		var BlockList newBlockList;
		
		let firstBlock = blockList.getBlock();
		// Set the coordinates to those of the first block so it will not be seen until the snake moves
		let newBlock = Block.new(firstBlock.getX(), firstBlock.getY(), blockSize); 
		let newBlockList = BlockList.new(newBlock);
		
		// Set the newly added block to be the last. The next time the snake will move it will become the first 
		// and will be rendered if `draw()` is called.
		do blockList.appendBlockList(newBlockList);
		return;
	}
	
	method int getHeadTop() {
		var Block firstBlock;
		let firstBlock = blockList.getBlock();
		return firstBlock.getY();
	}
	
	method int getHeadLeft() {
		var Block firstBlock;
		let firstBlock = blockList.getBlock();
		return firstBlock.getX();
	}
	
	method int getHeadRight() {
		return getHeadLeft() + blockSize;
	}
	
	method int getHeadBottom() {
		return getHeadTop() + blockSize;
	}
	
	/** Returns true if the snake's head collides with the given area */
	method boolean doesCollide(int top, int bottom, in left, int right) {
		var int snakeTop, snakeLeft, snakeRight, snakeBottom;
		let snakeTop = getHeadTop();
		let snakeLeft = getHeadLeft();
		let snakeRight = getHeadRight();
		let snakeBottom = getHeadBottom();
		
		// Snake faces up
		if ((snakeTop > top) & (snakeTop < bottom)) {
			if (((snakeRight < right) & (snakeRight > left)) | ((snakeLeft < right) & (snakeLeft > left))) {
				return true;
			}
		}
		
		// Snake faces down
		if ((snakeBottom > top) & (snakeBottom < bottom)) {
			if (((snakeRight < right) & (snakeRight > left)) | ((snakeLeft < right) & (snakeLeft > left))) {
				return true;
			}
		}
		
		// When the snake is equal to the given area. Used to detect self collisions.
		if ((snakeTop = top) & (snakeLeft = left) & (snakeRight = right) & (snakeBottom = bottom)) { return true; }
		return false;
	}

	/** Returns true if the snake collides with itself */
	method boolean doesCollideWithItself() {
		var BlockList lst;
		var Block block;
		let lst = blockList;
		
		while (~(lst.getNext() = null)) {
			let lst = lst.getNext();
			let block = lst.getBlock();
			if (doesCollide(block.getY(), block.getY() + block.getSize(), block.getX(), block.getX() + block.getSize()) & block.isVisible()) {
				return true;
			}
		}
		return false;
	}
	
	/** Getters */
	
	method int getDirection() { return direction; }
	method int getFirstBlockList() { return blockList; }
}