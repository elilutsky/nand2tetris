class Snake {
    field BlockList blockList;
	// 1 = Right, 2 = Left, 3 = Up, 4 = Down
	field int direction;

    /** Creates a new snake. */
    constructor Snake new(Block blockListIn) {
		let blockList = blockListIn;
		let direction = 2;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
		do blockList.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the snake on the screen. */
    method void draw() {
        do blockList.draw();
        return;
    }
	
	/** Moves the snake one step in the current direction. */
	method void move() {
		var BlockList lastBlockList;
		var Block lastBlock, firstBlock;
		
		let lastBlockList = blockList.removeLast();
		let lastBlock = lastBlockList.getBlock();
		let firstBlock = blockList.getBlock();
		
		if (direction = 1) {
			do lastBlock.setX(firstBlock.getX() + firstBlock.getSize() + 5);
			do lastBlock.setY(firstBlock.getY());
		}
		if (direction = 2) {
			do lastBlock.setX(firstBlock.getX() - firstBlock.getSize() - 5);
			do lastBlock.setY(firstBlock.getY());
		}
		if (direction = 3) {
			do lastBlock.setY(firstBlock.getY() - firstBlock.getSize() - 5);
			do lastBlock.setX(firstBlock.getX());
		}
		if (direction = 4) {
			do lastBlock.setY(firstBlock.getY() + firstBlock.getSize() + 5);
			do lastBlock.setX(firstBlock.getX());
		}
		
		do lastBlockList.appendBlockList(blockList); // move the last element to be the first;
		let blockList = lastBlockList;
		return;
	}
	
	/** Sets the direction of the snake. U-Turns are not allowed. */
	method void setDirection(int newDirection) {
		if (((direction = 1) & (newDirection = 2)) | ((direction = 2) & (newDirection = 1))) {
			// U-Turns are not allowed
			return;
		}
		if (((direction = 3) & (newDirection = 4)) | ((direction = 4) & (newDirection = 3))) {
			// U-Turns are not allowed
			return;
		}
		let direction = newDirection;
		return;
	}
	
	/** Increases the size of the snake by 1 */
	method void increaseSize() {
		var Block newBlock, firstBlock;
		var BlockList newBlockList;
		
		let firstBlock = blockList.getBlock();
		// Set the coordinates to those of the first block so it will not be seen until the snake moves
		let newBlock = Block.new(firstBlock.getX(), firstBlock.getY()); 
		let newBlockList = BlockList.new(newBlock);
		
		// Set the newly added block to be the last. The next time the snake will move it will become the first 
		// and will be rendered if `draw()` is called.
		do blockList.appendBlockList(newBlockList);
		return;
	}


	/** Getters */
	
	method int getDirection() { return direction; }
	method int getFirstBlockList() { return blockList; }
}