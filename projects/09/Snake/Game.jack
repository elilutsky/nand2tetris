class Game {
	field int screenWidth, screenHeight, topLimit, bottomLimit, rightLimit, leftLimit, borderSize;
	field Snake snake;

    /** Constructs a new Game object. */
    constructor Game new(int screenWidthIn, int screenHeightIn, int borderSizeIn) {
		let borderSize = borderSizeIn;
		let screenWidth = screenWidthIn;
		let screenHeight = screenHeightIn;
        let topLimit = borderSize;
        let bottomLimit = screenHeightIn - borderSize;
        let rightLimit = screenWidthIn - borderSize;
        let leftLimit = borderSize;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
	
	method void drawLimits() {
		// Top limit
		do Screen.drawRectangle(0, 0, screenWidth, topLimit);
		// Left Limit
		do Screen.drawRectangle(0, 0, leftLimit, screenHeight);
		// Right Limit
		do Screen.drawRectangle(rightLimit, 0, screenWidth, screenHeight);
		// Bottom Limit
		do Screen.drawRectangle(0, bottomLimit, screenWidth, screenHeight);
		return;
	}
	
	method void createSnake() {
		var Block first, second, third, fourth;
		var BlockList lst;
		
		let first = Block.new(200, 120);
		let second = Block.new(220, 120);
		let third = Block.new(240, 120);
		let fourth = Block.new(240, 120);
		let lst = BlockList.new(first);
		do lst.appendBlock(second);
		do lst.appendBlock(third);
		do lst.appendBlock(fourth);
		
		let snake = Snake.new(lst);
		return;
	}
	
	method void startGame() {
		var int counter, key;
	
		do drawLimits();
		do createSnake();

		do snake.draw();
		while (true) {
		
			let key = Keyboard.keyPressed();
			if (key = 130) { do snake.setDirection(2);} // Left key
			if (key = 131) { do snake.setDirection(3);} // Up key
			if (key = 132) { do snake.setDirection(1);} // Right key
			if (key = 133) { do snake.setDirection(4);} // Down key
			
			do snake.move();
			do snake.draw();
			//do snake.increaseSize();
			
			do Sys.wait(100);
		}
		return;
	}
}